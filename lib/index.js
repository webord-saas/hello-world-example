(()=>{var e={303:(e,r,t)=>{var i,o;i=[t,r,t(716),t(147)],void 0===(o=function(e,r,t,i){}.apply(r,i))||(e.exports=o)},147:(e,r,t)=>{var i;i=function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.HelloWorld=void 0,r.HelloWorld=()=>document.createElement("p").innerHTML="Hello World from Plugin"}.apply(r,[t,r]),void 0===i||(e.exports=i)},776:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Actions=void 0,r.Actions={action:{},registerAction(e){if(!e.name)throw new Error("Action name is required");if(!e.exec)throw new Error("Action exec is required");if(this.action[e.name])throw new Error("Action name already exists");this.action[e.name]=e.exec},useAction(e,...r){if(!this.action[e])throw new Error("Action not found");return this.action[e](...r)}}},716:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Webord=void 0;const i=t(776),o=t(150);r.Webord={registerCategory:e=>o.Links.registerCategory(e),updateCategory:e=>o.Links.updateCategory(e),removeCategory:e=>o.Links.removeCategory(e),registerLink:e=>o.Links.registerLink(e),updateLink:e=>o.Links.updateLink(e),removeLink:e=>o.Links.removeLink(e),getNavigationTree:()=>o.Links.getLinkTree(),registerAction:e=>i.Actions.registerAction(e),useAction:(e,...r)=>i.Actions.useAction(e,...r)}},150:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Links=void 0,r.Links={categories:[],registerCategory(e){if(!e.key)throw new Error("Category key is required");if(!e.name)throw new Error("Category name is required");if(!e.path)throw new Error("Category path is required");if(this.categories.find((r=>r.key===e.key)))throw new Error("Category key already exists");if(e.categoryKey&&!this.categories.find((r=>r.key===e.categoryKey)))throw new Error("Category parent not found");return this.categories.push(e),this.categories},updateCategory(e){const r=this.categories.findIndex((r=>r.key===e.key));if(-1===r)throw new Error("Category not found");return this.categories[r]=e,this.categories},removeCategory(e){const r=this.categories.findIndex((r=>r.key===e));if(-1===r)throw new Error("Category not found");return this.categories.splice(r,1),this.categories},links:[],registerLink(e){if(!e.key)throw new Error("Link key is required");if(!e.name)throw new Error("Link name is required");if(!e.categoryKey)throw new Error("Link categoryKey is required");if(e.path||(e.path="/"+e.key),this.links.find((r=>r.key===e.key)))throw new Error("Link key already exists");if(!this.categories.find((r=>r.key===e.categoryKey)))throw new Error("Link category not found");return this.links.push(e),this.links},updateLink(e){const r=this.links.findIndex((r=>r.key===e.key));if(-1===r)throw new Error("Link not found");return this.links[r]=e,this.links},removeLink(e){const r=this.links.findIndex((r=>r.key===e));if(-1===r)throw new Error("Link not found");return this.links.splice(r,1),this.links},getLinkTree(){let e=[];return this.categories.filter((e=>!e.categoryKey)).forEach((r=>{let t=this.getRecursiveCategory(r.key);e.push(t)})),e},getRecursiveCategory(e){let r=this.categories.find((r=>r.key===e)),t=[];if(!r)throw new Error("Category not found");this.categories.filter((r=>r.categoryKey===e)).forEach((e=>{let r=this.getRecursiveCategory(e.key);t.push(r)}));let i=this.links.filter((r=>r.categoryKey===e));return r.links=i,Object.assign(Object.assign({},r),{subCategorie:t})}}}},r={};!function t(i){var o=r[i];if(void 0!==o)return o.exports;var n=r[i]={exports:{}};return e[i](n,n.exports,t),n.exports}(303)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,